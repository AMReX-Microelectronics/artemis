################################
####### GENERAL PARAMETERS ######
#################################
max_step = 3000
amr.n_cell = n_cellx n_celly n_cellz
amr.max_grid_size = 384
amr.blocking_factor = 32
geometry.prob_lo     = prob_lo_x prob_lo_y prob_lo_z
geometry.prob_hi     = prob_hi_x prob_hi_y prob_hi_z
amr.max_level = 0

# use pec instead of pml overlaying current source so you don't get a reflection
boundary.field_lo = pml pec pec
boundary.field_hi = pml pml pml

#################################
############ NUMERICS ###########
#################################
warpx.verbose = 1

warpx.cfl = 0.9

# vacuum or macroscopic
algo.em_solver_medium = macroscopic

# laxwendroff or backwardeuler
algo.macroscopic_sigma_method = laxwendroff

###############
# geometry
# each row represents a different part of the circuit
# 1. vacuum everywhere, then add in si and pd sections
# 2. si substrate
# 3. straight pd wire from inlet in +y direction
# 4. curved pd wire
# 5. straight pd wire in -x direction
###############

macroscopic.sigma_function(x,y,z) = "sigma_0
+ (sigma_si - sigma_0) * (z <= h_si)
+ (sigma_pd - sigma_0) * (x >= -w_pd/2.) * (x <= w_pd/2.) * (y <= l_pd) * (z > h_si) * (z <= h_si + h_pd)
+ (sigma_pd - sigma_0) * ( (x+r_pd)^2 + (y-l_pd)^2 >= (r_pd-w_pd/2.)^2 ) * ( (x+r_pd)^2 + (y-l_pd)^2 <= (r_pd+w_pd/2.)^2 ) * (x >= -r_pd) * (y > l_pd) * (z > h_si) * (z <= h_si+h_pd)
+ (sigma_pd - sigma_0) * (x < -r_pd) * (y >= l_pd+r_pd-w_pd/2.) * (y <= l_pd+r_pd+w_pd/2.) * (z > h_si) * (z <= h_si+h_pd)"

macroscopic.epsilon_function(x,y,z) = "epsilon_0
+ epsilon_0 * (epsilon_r_si - 1.) * (z <= h_si)
+ epsilon_0 * (epsilon_r_pd - 1.) * (x >= -w_pd/2.) * (x <= w_pd/2.) * (y <= l_pd) * (z > h_si) * (z <= h_si + h_pd)
+ epsilon_0 * (epsilon_r_pd - 1.) * ( (x+r_pd)^2 + (y-l_pd)^2 >= (r_pd-w_pd/2.)^2 ) * ( (x+r_pd)^2 + (y-l_pd)^2 <= (r_pd+w_pd/2.)^2 ) * (x >= -r_pd) * (y > l_pd) * (z > h_si) * (z <= h_si+h_pd)
+ epsilon_0 * (epsilon_r_pd - 1.) * (x < -r_pd) * (y >= l_pd+r_pd-w_pd/2.) * (y <= l_pd+r_pd+w_pd/2.) * (z > h_si) * (z <= h_si+h_pd)"

macroscopic.mu_function(x,y,z) = "mu_0
+ mu_0 * (mu_r_si - 1.) * (z <= h_si)
+ mu_0 * (mu_r_pd - 1.) * (x >= -w_pd/2.) * (x <= w_pd/2.) * (y <= l_pd) * (z > h_si) * (z <= h_si + h_pd)
+ mu_0 * (mu_r_pd - 1.) * ( (x+r_pd)^2 + (y-l_pd)^2 >= (r_pd-w_pd/2.)^2 ) * ( (x+r_pd)^2 + (y-l_pd)^2 <= (r_pd+w_pd/2.)^2 ) * (x >= -r_pd) * (y > l_pd) * (z > h_si) * (z <= h_si+h_pd)
+ mu_0 * (mu_r_pd - 1.) * (x < -r_pd) * (y >= l_pd+r_pd-w_pd/2.) * (y <= l_pd+r_pd+w_pd/2.) * (z > h_si) * (z <= h_si+h_pd)"

#################################
############ FIELDS #############
#################################

###############
# domain size
###############
my_constants.n_cellx = 256
my_constants.n_celly = 384
my_constants.n_cellz = 32

my_constants.prob_lo_x = -16.e-6
my_constants.prob_hi_x = 16.e-6
my_constants.prob_lo_y = 0.
my_constants.prob_hi_y = 48.e-6
my_constants.prob_lo_z = 0.
my_constants.prob_hi_z = 4.e-6

###############
# material properties
###############
my_constants.sigma_0 = 0.0
my_constants.sigma_pd = 1.e7
my_constants.sigma_si = 1.e1

my_constants.epsilon_0 = 8.8541878128e-12
my_constants.epsilon_r_pd = 13.
my_constants.epsilon_r_si = 12.

my_constants.mu_0 = 1.25663706212e-06
my_constants.mu_r_pd = 1.0
my_constants.mu_r_si = 1.0

###############
# silicon and palladium cross section
###############
my_constants.h_si = 1.e-6
my_constants.w_pd = 2.e-6
my_constants.h_pd = 1.e-6

###############
# curved geometry parameters
###############

# straight tube
#my_constants.r_pd = 0.   # note this is irrelevant if l_pd is larger than L_y
#my_constants.l_pd = 1.e9

# 90 degree angle
#my_constants.r_pd = 0.
#my_constants.l_pd = 32.e-6

# rounded
my_constants.r_pd = 16.e-6
my_constants.l_pd = 16.e-6

###############
# waveguide port parameters
###############
my_constants.h_port = 1.e-6
my_constants.w_port = 16.e-6
my_constants.wavelength = 4.e-6

###############
# derived quantities and fundamental constants - don't touch these
###############

my_constants.pi = 3.14159265358979

# c is 1/sqrt(epsilon*mu) using palladium material properties
my_constants.c = 1./sqrt(epsilon_0*epsilon_r_si*mu_0*mu_r_si)

# grid spacing
my_constants.dx = (prob_hi_x - prob_lo_x) / n_cellx
my_constants.dy = (prob_hi_y - prob_lo_y) / n_celly
my_constants.dz = (prob_hi_z - prob_lo_z) / n_cellz

###############
# excitation
###############

warpx.E_excitation_on_grid_style = parse_E_excitation_grid_function

warpx.Ex_excitation_flag_function(x,y,z) = "0."
warpx.Ey_excitation_flag_function(x,y,z) = "0."
warpx.Ez_excitation_flag_function(x,y,z) = "(x > -w_port/2.) * (x < w_port/2.) * (z > prob_lo_z) * (z < prob_lo_z + h_port) * (y >= prob_lo_y - dy/2.) * (y <= prob_lo_y + dy/2.)"

warpx.Ex_excitation_grid_function(x,y,z,t) = "0."
warpx.Ey_excitation_grid_function(x,y,z,t) = "0."
warpx.Ez_excitation_grid_function(x,y,z,t) = "cos((pi*x)/w_port) * cos(2*pi*c*t/wavelength)"

###############
# diagnostics
###############

diagnostics.diags_names = plt
plt.intervals = 10
plt.fields_to_plot = Ex Ey Ez Bx By Bz
plt.diag_type = Full
