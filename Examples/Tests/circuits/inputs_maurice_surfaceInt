################################
####### GENERAL PARAMETERS ######
#################################
max_step = 4000

amr.n_cell = n_cellx n_celly n_cellz
amr.max_grid_size = max_grid_size
amr.blocking_factor = blocking_factor
amr.refine_grid_layout = 1  # if n_MPI > n_grids, the grids will be successively divided in half until n_MPI <= n_grids

# need this here for some reason with blocking_factor = 40
amr.check_input = 0

geometry.dims = 3
geometry.prob_lo = -Lx/2. 0. 0.
geometry.prob_hi =  Lx/2. Ly Lz

amr.max_level = 0

# use pec instead of pml overlaying current source so you don't get a reflection
boundary.field_lo = pml pml pec
boundary.field_hi = pml pml pml

#################################
############ NUMERICS ###########
#################################
warpx.verbose = 1

warpx.cfl = 0.9

# vacuum or macroscopic
algo.em_solver_medium = macroscopic

# laxwendroff or backwardeuler
algo.macroscopic_sigma_method = laxwendroff

###############
# geometry
# each row represents a different part of the circuit
# 1. SiO2 everywhere, then add in palladium and aluminum
# 2. first segment of pd electrode
# 3. upward portion of pd electrode
# 4. last segment of pd electrode
# 5. aluminum block
# 6. gate oxide block
###############

macroscopic.sigma_function(x,y,z) = "sigma_SiO2
+ (sigma_Pd - sigma_SiO2)   * (x >= -w_Pd/2) * (x <= w_Pd/2) * (y <= l_Pd) * (z >= d_Pd) * (z <= d_Pd + h_Pd)
+ (sigma_Pd - sigma_SiO2)   * (x >= -w_Pd/2) * (x <= w_Pd/2) * (y >= l_Pd - h_Pd) * (y <= l_Pd) * (z > d_Pd + h_Pd) * (z <= d_Pd + h_Pd + th_gate)
+ (sigma_Pd - sigma_SiO2)   * (x >= -w_Pd/2) * (x <= w_Pd/2) * (y > l_Pd) * (z >= d_Pd + th_gate) * (z <= d_Pd + h_Pd + th_gate)
+ (sigma_Al - sigma_SiO2)   * (y >= Ly - l_Al) * (z <= d_Pd)
+ (sigma_gate - sigma_SiO2) * (y > l_Pd) * (z > d_Pd) * (z < d_Pd + th_gate)"

macroscopic.epsilon_function(x,y,z) = "eps_0 * eps_r_SiO2
+ eps_0 * (eps_r_Pd - eps_r_SiO2)   * (x >= -w_Pd/2) * (x <= w_Pd/2) * (y <= l_Pd) * (z >= d_Pd) * (z <= d_Pd + h_Pd)
+ eps_0 * (eps_r_Pd - eps_r_SiO2)   * (x >= -w_Pd/2) * (x <= w_Pd/2) * (y >= l_Pd - h_Pd) * (y <= l_Pd) * (z > d_Pd + h_Pd) * (z <= d_Pd + h_Pd + th_gate)
+ eps_0 * (eps_r_Pd - eps_r_SiO2)   * (x >= -w_Pd/2) * (x <= w_Pd/2) * (y > l_Pd) * (z >= d_Pd + th_gate) * (z <= d_Pd + h_Pd + th_gate)
+ eps_0 * (eps_r_Al - eps_r_SiO2)   * (y >= Ly - l_Al) * (z <= d_Pd)
+ eps_0 * (eps_r_gate - eps_r_SiO2) * (y > l_Pd) * (z > d_Pd) * (z < d_Pd + th_gate)"

macroscopic.mu_function(x,y,z) = "mu_0 * mu_r_SiO2
+ mu_0 * (mu_r_Pd - mu_r_SiO2)   * (x >= -w_Pd/2) * (x <= w_Pd/2) * (y <= l_Pd) * (z >= d_Pd) * (z <= d_Pd + h_Pd)
+ mu_0 * (mu_r_Pd - mu_r_SiO2)   * (x >= -w_Pd/2) * (x <= w_Pd/2) * (y >= l_Pd - h_Pd) * (y <= l_Pd) * (z > d_Pd + h_Pd) * (z <= d_Pd + h_Pd + th_gate)
+ mu_0 * (mu_r_Pd - mu_r_SiO2)   * (x >= -w_Pd/2) * (x <= w_Pd/2) * (y > l_Pd) * (z >= d_Pd + th_gate) * (z <= d_Pd + h_Pd + th_gate)
+ mu_0 * (mu_r_Al - mu_r_SiO2)   * (y >= Ly - l_Al) * (z <= d_Pd)
+ mu_0 * (mu_r_gate - mu_r_SiO2) * (y > l_Pd) * (z > d_Pd) * (z < d_Pd + th_gate)"

#################################
############ FIELDS #############
#################################

###############
# domain size
# n_cellx/y/z and Lx/y/z are needed to calculate dx/dy/dz
###############
my_constants.n_cellx = 200
my_constants.n_celly = 60
my_constants.n_cellz = 400
my_constants.max_grid_size = 400
my_constants.blocking_factor = 40

my_constants.Lx = 4.e-6
my_constants.Ly = 6.e-6
my_constants.Lz = 4.e-6

###############
# material properties
###############
my_constants.sigma_0 = 0.0
my_constants.sigma_Pd = 1.e7
my_constants.sigma_Al = 3.8e7
my_constants.sigma_SiO2 = 1.e-10
my_constants.sigma_gate = 1.e-10

my_constants.eps_0 = 8.8541878128e-12
my_constants.eps_r_Pd = 13.
my_constants.eps_r_Al = 1.7
my_constants.eps_r_SiO2 = 3.8
my_constants.eps_r_gate = 3.8

my_constants.mu_0 = 1.25663706212e-06
my_constants.mu_r_Pd = 1.0008
my_constants.mu_r_Al = 1.000022
my_constants.mu_r_SiO2 = 1.0
my_constants.mu_r_gate = 1.0

###############
# silicon and palladium cross section
###############

my_constants.h_Pd = 100.e-9
my_constants.w_Pd = 2.e-6
my_constants.d_Pd = 2.e-6
my_constants.l_Pd = 3.e-6

my_constants.th_gate = 20.e-9

my_constants.l_Al = 1.5e-6

###############
# waveguide port parameters
###############
my_constants.w_port = 2.e-6
my_constants.h_port = 2.e-6

my_constants.freq = 100.e12

###############
# derived quantities and fundamental constants - don't touch these
###############

my_constants.pi = 3.14159265358979

# grid spacing
my_constants.dx = Lx / n_cellx
my_constants.dy = Ly / n_celly
my_constants.dz = Lz / n_cellz

my_constants.tiny = 1.e-12

###############
# excitation
###############

warpx.E_excitation_on_grid_style = parse_E_excitation_grid_function

warpx.Ex_excitation_flag_function(x,y,z) = "0."
warpx.Ey_excitation_flag_function(x,y,z) = "0."
warpx.Ez_excitation_flag_function(x,y,z) = "2* (x > -w_port/2.) * (x < w_port/2.) * (z > 0.) * (z < h_port) * (y >= -dy/2.) * (y <= dy/2.)"

warpx.Ex_excitation_grid_function(x,y,z,t) = "0."
warpx.Ey_excitation_grid_function(x,y,z,t) = "0."
warpx.Ez_excitation_grid_function(x,y,z,t) = "sin(2*pi*freq*t) * (t < (1./freq))"

warpx.B_excitation_on_grid_style = parse_B_excitation_grid_function

warpx.Bx_excitation_flag_function(x,y,z) = "2* (x > -w_port/2.) * (x < w_port/2.) * (z > 0.) * (z < h_port) * (y >= 0.) * (y <= dy)"
warpx.By_excitation_flag_function(x,y,z) = "0."
warpx.Bz_excitation_flag_function(x,y,z) = "0."

warpx.Bx_excitation_grid_function(x,y,z,t) = "(mu_0*mu_r_SiO2/50.)*(sin(2*pi*freq*t)) * (t < (1./freq))"
warpx.By_excitation_grid_function(x,y,z,t) = "0."
warpx.Bz_excitation_grid_function(x,y,z,t) = "0."

###############
# diagnostics
###############

diagnostics.diags_names = plt
#diagnostics.diags_names = plt input output

###############
# full plotfiles
plt.intervals = 10
# plt.fields_to_plot = Ez Bx
plt.fields_to_plot = Ex Ey Ez Bx By Bz epsilon sigma mu
#plt.fields_to_plot = Ez epsilon sigma mu
plt.diag_type = Full

########################## Surface Integral on the Y-Plane #############################
my_constants.eps=1.e-9

warpx.reduced_diags_names = Int_yInputPlane Int_yOutputPlane Int_yOutputPlane2
Int_yInputPlane.type = RawEFieldReduction
Int_yInputPlane.reduction_type = integral
Int_yInputPlane.integration_type = surface
Int_yInputPlane.intervals = 1
Int_yInputPlane.surface_normal = Y
my_constants.YInputPlaneLoc=2*dy #Nodes aligned with Y

Int_yOutputPlane.type = RawEFieldReduction
Int_yOutputPlane.reduction_type = integral
Int_yOutputPlane.integration_type = surface
Int_yOutputPlane.intervals = 1
Int_yOutputPlane.surface_normal = Y
my_constants.YOutputPlaneLoc=Ly - l_Al #Nodes aligned with Y

Int_yOutputPlane2.type = RawEFieldReduction
Int_yOutputPlane2.reduction_type = integral
Int_yOutputPlane2.integration_type = surface
Int_yOutputPlane2.intervals = 1
Int_yOutputPlane2.surface_normal = Y
my_constants.YOutputPlaneLoc2=Ly-2*dy #Nodes aligned with Y

 Int_yInputPlane.reduced_function(x,y,z) = " (x => -w_port/2.) * (x <= w_port/2.) * (y >= YInputPlaneLoc - dy/2.) * (y <= YInputPlaneLoc) * (z > 0.) * (z <= h_port) * 1"
 Int_yOutputPlane.reduced_function(x,y,z) = " (x >= -w_port/2.) * (x <= w_port/2.) * (y >= YOutputPlaneLoc - dy/2.) * (y <= YOutputPlaneLoc) * (z >= 0.) * (z <= h_port) * 1"
 Int_yOutputPlane2.reduced_function(x,y,z) = " (x >= -w_port/2.) * (x <= w_port/2.) * (y >= YOutputPlaneLoc2 - dy/2.) * (y <= YOutputPlaneLoc2) * (z >= 0.) * (z <= h_port+th_gate) * 1"
